"""
ScamSama v1.0.0
Ubuntufanboy July 23rd 2025 https://github.com/Ubuntufanboy/ScamSama

Licenced under LGPL-2.1 license.

Thank you VedalAI for creating such a wonderful platform and using my code! I hope you enjoy it!
"""

# These are all Stdlib
import os
import sys
import subprocess
import json
import time
import threading
from pathlib import Path
from typing import Dict, List, Optional

try:
    from rich.console import Console
    from rich.panel import Panel
    from rich.text import Text
    from rich.prompt import Prompt, Confirm
    from rich.progress import Progress, SpinnerColumn, TextColumn
    from rich.table import Table
    from rich.layout import Layout
    from rich.live import Live
    from rich.align import Align
    from rich.rule import Rule
    import pyfiglet
except ImportError:
    print("Missing required packages. Please run: pip install -r requirements.txt")
    sys.exit(1)

console = Console()

class ScamSamaLauncher:
    def __init__(self):
        self.root_dir = Path(__file__).parent
        self.env_file = self.root_dir / ".env"
        self.src_dir = self.root_dir / "src"
        self.config = {}
        self.ngrok_process = None
        self.flask_running = False
        
    def display_banner(self):
        try:
            banner = pyfiglet.figlet_format("Scam Sama", font="slant")
            console.print(Panel(
                Align.center(Text(banner, style="bold cyan") + 
                           Text("\n\"Fighting crime, one meme at a time\"\n", style="italic yellow") +
                           Text("Created by Ubuntufanboy", style="dim white")),
                border_style="bright_blue",
                padding=(1, 2)
            ))
            # Probably most annoying library ever made. FML
            # It looks sick tho ngl
        except:
            console.print(Panel(
                Align.center(Text("ScamSama\n", style="bold cyan") + 
                           Text("\"Fighting crime, one meme at a time\"\n", style="italic yellow") +
                           Text("Created by Ubuntufanboy", style="dim white")),
                border_style="bright_blue",
                padding=(1, 2)
            ))
    
    def check_prerequisites(self) -> bool:
        console.print("\nChecking prerequisites...", style="bold yellow")
        
        missing = []
        
        if sys.version_info < (3, 8):
            missing.append("Python 3.8+")
        
        # This will only work on Linux. We can port to Windows later surely
        commands = ["git", "python3", "pip"]
        for cmd in commands:
            if subprocess.run(["which", cmd], capture_output=True).returncode != 0:
                missing.append(cmd)
        
        if missing:
            console.print(f"❌ Missing prerequisites: {', '.join(missing)}", style="red")
            return False
        
        console.print("All prerequisites found!", style="green")
        return True
    
    def install_requirements(self):
        console.print("\nInstalling Python requirements...", style="bold yellow")
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console,
        ) as progress:
            task = progress.add_task("Installing packages...", total=None)
            
            try:
                result = subprocess.run([
                    sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
                ], capture_output=True, text=True, cwd=self.root_dir)
                
                if result.returncode == 0:
                    console.print("Requirements installed successfully!", style="green")
                else:
                    console.print(f"Error installing requirements:\n{result.stderr}", style="red")
                    return False
            except Exception as e:
                console.print(f"Error: {e}", style="red")
                return False
        
        return True
    
    def load_env_config(self) -> Dict[str, str]:
        config = {}
        if self.env_file.exists():
            with open(self.env_file, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        config[key] = value
        return config
    
    def save_env_config(self, config: Dict[str, str]):
        # Autosave to prevent needing to retype inbetween runs
        with open(self.env_file, 'w') as f:
            f.write("# ScamSama Configuration\n")
            f.write("# Generated by ScamSama Launcher\n\n")
            for key, value in config.items():
                f.write(f"{key}={value}\n")
    
    def setup_configuration(self):
        console.print("\nConfiguration Setup", style="bold yellow")
        console.print("Let's set up your ScamSama configuration step by step!\n")
        
        config = self.load_env_config()
        
        console.print(Panel(
            "Discord Bot Setup\n\n"
            "1. Go to https://discord.com/developers/applications\n"
            "2. Create a new application\n"
            "3. Go to 'Bot' section and create a bot\n"
            "4. Copy the bot token",
            title="Discord Bot Token",
            border_style="blue"
        ))
        
        current_token = config.get('DISCORD_BOT_TOKEN', 'TOKEN_HERE_DONT_PUT_QUOTES')
        if current_token != 'TOKEN_HERE_DONT_PUT_QUOTES':
            console.print(f"Current token: {current_token[:20]}...", style="dim")
        
        token = Prompt.ask("Enter your Discord Bot Token", default=current_token if current_token != 'TOKEN_HERE_DONT_PUT_QUOTES' else "")
        config['DISCORD_BOT_TOKEN'] = token
        
        console.print(Panel(
            "Twilio Setup\n\n"
            "1. Create account at https://www.twilio.com\n"
            "2. Get your Account SID (starts with 'AC')\n"
            "3. Get your Auth Token\n"
            "4. Buy a phone number",
            title="Twilio Configuration",
            border_style="green"
        ))
        
        config['TWILIO_ACCOUNT_SID'] = Prompt.ask("Twilio Account SID", default=config.get('TWILIO_ACCOUNT_SID', ''))
        config['TWILIO_AUTH_TOKEN'] = Prompt.ask("Twilio Auth Token", default=config.get('TWILIO_AUTH_TOKEN', ''))
        config['YOUR_TWILIO_PHONE_NUMBER'] = Prompt.ask("Your Twilio Phone Number (with +)", default=config.get('YOUR_TWILIO_PHONE_NUMBER', ''))
        config['NUMBER_TO_CALL'] = Prompt.ask("Target Phone Number (with +)", default=config.get('NUMBER_TO_CALL', ''))
        
        self.save_env_config(config)
        console.print("Configuration saved!", style="green")
        return config
    
    def start_ngrok(self) -> Optional[str]:
        """Start ngrok tunnel"""
        console.print("\nStarting ngrok tunnel...", style="bold yellow")
        
        try:
            result = subprocess.run(["which", "ngrok"], capture_output=True)
            if result.returncode != 0:
                console.print("ngrok not found. Please install ngrok first:", style="red")
                console.print("Visit: https://ngrok.com/download", style="blue")
                return None
            
            self.ngrok_process = subprocess.Popen(
                ["ngrok", "http", "5000", "--log=stdout"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            # Wait for ngrok to start and get the URL. Set a timeout just in case though
            url = None
            time.sleep(2)  # Surely that's enough time... glueless
            for _ in range(30):  # Wait up to 30 seconds just in case
                try:
                    # Try to get ngrok status with cURL. Might not work on windows tbh idk
                    result = subprocess.run(
                        ["curl", "-s", "http://localhost:4040/api/tunnels"],
                        capture_output=True, text=True, timeout=5
                    )
                    if result.returncode == 0 and result.stdout:
                        # God is dead. And we killed him...
                        data = json.loads(result.stdout)
                        if data.get('tunnels') and len(data['tunnels']) > 0:
                            url = data['tunnels'][0]['public_url']
                            break
                except (json.JSONDecodeError, IndexError, KeyError):
                    pass # Glueless
                except Exception as e:
                    console.print(f"Error checking ngrok status: {e}", style="red")

                time.sleep(1)
            
            if url:
                console.print(f"ngrok tunnel started: {url}", style="green")
                
                config = self.load_env_config()
                config['NGROK_BASE_URL'] = url
                self.save_env_config(config)
                
                return url
            else:
                console.print("Failed to get ngrok URL", style="red")
                return None
                
        except Exception as e:
            console.print(f"❌ Error starting ngrok: {e}", style="red")
            return None
    
    def run_scamsama(self):
        console.print("\nStarting ScamSama...", style="bold yellow")
        
        try:
            os.chdir(self.src_dir)
            subprocess.run([sys.executable, "main.py"])
        except KeyboardInterrupt:
            console.print("\nScamSama stopped by user", style="yellow")
        except Exception as e:
            console.print(f"Error running ScamSama: {e}", style="red")
    
    def show_status(self):
        config = self.load_env_config()
        
        table = Table(title="Current Configuration", border_style="blue")
        table.add_column("Setting", style="cyan", no_wrap=True)
        table.add_column("Status", style="green")
        table.add_column("Value", style="white")
        
        settings = [
            ("Discord Bot Token", "DISCORD_BOT_TOKEN"),
            ("Twilio Account SID", "TWILIO_ACCOUNT_SID"),
            ("Twilio Auth Token", "TWILIO_AUTH_TOKEN"),
            ("Twilio Phone Number", "YOUR_TWILIO_PHONE_NUMBER"),
            ("Target Phone Number", "YOUR_PERSONAL_PHONE_NUMBER"),
            ("ngrok URL", "NGROK_BASE_URL"),
        ]
        
        for name, key in settings:
            value = config.get(key, "Not Set")
            status = "Set!" if value and value != "Not Set" else "Not set..."
            display_value = value[:30] + "..." if len(value) > 30 else value
            table.add_row(name, status, display_value)
        
        console.print(table)
    
    def main_menu(self):
        while True:
            console.clear()
            self.display_banner()
            
            console.print("\nMain Menu", style="bold cyan")
            console.print("1. Setup Configuration")
            console.print("2. Install Requirements")
            console.print("3. Start ngrok Tunnel")
            console.print("4. Run ScamSama")
            console.print("5. Show Status")
            console.print("6. Quick Start (All Steps)")
            console.print("7. Exit")
            
            choice = Prompt.ask("\nSelect an option", choices=["1", "2", "3", "4", "5", "6", "7"], default="6")
            
            if choice == "1":
                self.setup_configuration()
                input("\nPress Enter to continue...")
            
            elif choice == "2":
                if not self.install_requirements():
                    input("\nPress Enter to continue...")
            
            elif choice == "3":
                url = self.start_ngrok()
                if url:
                    console.print(f"\nngrok tunnel running at: {url}")
                    console.print("Keep this terminal open while using ScamSama!")
                input("\nPress Enter to continue...")
            
            elif choice == "4":
                if not self.env_file.exists():
                    console.print("Configuration not found. Please setup configuration first.", style="red")
                    input("\nPress Enter to continue...")
                    continue
                self.run_scamsama()
                input("\nPress Enter to continue...")
            
            elif choice == "5":
                self.show_status()
                input("\nPress Enter to continue...")
            
            elif choice == "6":
                if not self.check_prerequisites():
                    input("\nPress Enter to continue...")
                    continue
                
                if not self.install_requirements():
                    input("\nPress Enter to continue...")
                    continue
                
                self.setup_configuration()
                
                ngrok_url = self.start_ngrok()
                if not ngrok_url:
                    input("\nPress Enter to continue...")
                    continue
                
                console.print("\nSetup complete! Starting ScamSama...", style="bold green")
                time.sleep(2)
                self.run_scamsama()
            
            elif choice == "7":
                if self.ngrok_process:
                    console.print("Stopping ngrok...", style="yellow")
                    self.ngrok_process.terminate()
                console.print("Goodbye!", style="bold blue")
                break

def main():
    launcher = ScamSamaLauncher()
    try:
        launcher.main_menu()
    except KeyboardInterrupt:
        console.print("\n\nGoodbye!", style="bold blue")
    except Exception as e:
        console.print(f"\nUnexpected error: {e}", style="red")

if __name__ == "__main__":
    main()
